version: '3.8'

services:

  zookeeper:
    container_name: zookeeper
    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs
    networks:
      - kafka-network

  kafka1:
    container_name: kafka1
    image: quay.io/strimzi/kafka:0.22.1-kafka-2.7.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    networks:
      - kafka-network
    depends_on:
      - zookeeper


  schema-registry:
    container_name: schema-registry
    image: apicurio/apicurio-registry-mem:1.2.2.Final
    ports:
      - 8081:8080
    environment:
      QUARKUS_PROFILE: prod
      KAFKA_BOOTSTRAP_SERVERS: kafka1:9092
      APPLICATION_ID: registry_id
      APPLICATION_SERVER: localhost:9000
    networks:
      - kafka-network
    depends_on:
      - kafka1

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka1:9092
    networks:
      - kafka-network
    depends_on:
      - kafka1

  infinispan:
    container_name: infinispan
    image: quay.io/infinispan/server:12.1
    ports:
      - 11222:11222
    environment:
      USER: username
      PASS: password

networks:
  kafka-network:
    name: kafka-network
